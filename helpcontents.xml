<Operators>
**		Exponentiation
+ -		* /  	Addition, subtraction, multiplication, division
%		Modulo division
& | ^	Bitwise AND, bitwise OR, bitwise exclusive OR
>> <<	Bitwise shift right, bitwise shift left
|| &&	Logical OR, logical AND
.		Concatenation of two strings
x		Returns a string or array consisting of the left operand (an array or a string) repeated the number of times specified by the right operand
All of the above operators also have an assignment operator, e.g., .=
->		Dereference operator
\		Reference (unary)
! ~		Negation (unary), bitwise complement (unary)
++ --	Auto-increment (magical on strings), auto-decrement
== !=	Numeric equality, inequality
eq ne	String equality, inequality
< >		Numeric less than, greater than
lt gt	String less than, greater than
<= >=	Numeric less (greater) than or equal to
le ge	String less (greater) than or equal to
<=>		cmp 	Numeric (string) compare. Returns -1, 0, 1.
=~ !~	Search pattern, substitution, or translation (negated)
..		Range (scalar context) or enumeration (array context)
?:		Alternation (if-then-else) operator
,		Comma operator, also list element separator. You can also use =>.
not		Low-precedence negation
and		Low-precedence AND
or xor	Low-precedence OR, exclusive OR
</Operators>

<Math Functions>
abs EXPR		Returns the absolute value of its operand.
atan2 Y,X		Returns the arctangent of Y/X in the range -pi to pi.
cos EXPR		Returns the cosine of EXPR (expressed in radians).
exp EXPR		Returns e to the power of EXPR.
int EXPR		Returns the integer portion of EXPR.
log EXPR		Returns natural logarithm (base e) of EXPR.
rand EXPR		Returns a random fractional number between 0 and the value of EXPR. If EXPR is omitted, returns a value between 0 and 1.
sin EXPR	Returns the sine of EXPR (expressed in radians).
sqrt EXPR	Returns the square root of EXPR.
srand EXPR	Sets the random number seed for the rand operator.
</Math Functions>

<Conversion Functions>
chr EXPR		Returns the character represented by the decimal value EXPR.
gmtime EXPR		Converts a time as returned by the time function to a 9-element array (0: $sec, 1: $min, 2: $hour, 3: $mday, 4: $mon, 5: $year, 6: $wday, 7: $yday, 8: $isdst) with the time analyzed for the Greenwich time zone. $mon has the range 0..11 and $wday has the range 0..6.
hex EXPR		Returns the decimal value of EXPR interpreted as a hex string.
localtime EXPR	Converts a time as returned by the time function to ctime(3) string. In array context, returns a 9-element array with the time analyzed for the local time zone.
oct EXPR		Returns the decimal value of EXPR interpreted as an octal string. If EXPR starts off with 0x, interprets it as a hex string instead.
ord EXPR		Returns the ASCII value of the first character of EXPR.
vec EXPR, OFFSET, BITS	Treats string EXPR as a vector of unsigned integers, and yields the bit at OFFSET. BITS must be between 1 and 32. May be assigned to.
</Conversion Functions>

<Structure Conversion>
pack TEMPLATE, LIST		Packs the values into a binary structure using TEMPLATE.
unpack TEMPLATE, EXPR	npacks the structure EXPR into an array, using TEMPLATE.

TEMPLATE is a sequence of characters as follows:
a / A			ASCII string, null- / space-padded
b / B		Bit string in ascending / descending order
c / C		Native / unsigned char value
f / d		Single / double float in native format
h / H		Hex string, low / high nybble first
i / I		Signed / unsigned integer value
l / L		Signed / unsigned long value
n / N		Short / long in network (big endian) byte order
s / S		Signed / unsigned short value
u / P		Uuencoded string / pointer to a string
v / V		Short / long in VAX (little endian) byte order
x / @		Null byte / null fill until position
X			Backup a byte
Each character may be followed by a decimal number that will be used as a repeat count; an asterisk (*) specifies all remaining arguments. If the format is preceded with %N, unpack returns an N-bit checksum instead. Spaces may be included in the template for readability purposes.
</Structure Conversion>

<String Functions>
chomp LIST		Removes line endings from all elements of the list; returns the (total) number of characters removed.
chop LIST		Chops off the last character on all elements of the list; returns the last chopped character.
crypt PLAINTEXT, SALT	Encrypts a string.
eval EXPR		EXPR is parsed and executed as if it were a Perl program. The value returned is the value of the last expression evaluated. If there is a syntax error or runtime error, an undefined string is returned by eval, and $@ is set to the error message. See also eval in section Miscellaneous.
index STR, SUBSTR [ , OFFSET ]	Returns the position of SUBSTR in STR at or after OFFSET. If the substring is not found, returns -1 (but see $[ in section Special Variables).
length EXPR		Returns the length in characters of the value of EXPR.
lc EXPR			Returns a lowercase version of EXPR.
lcfirst EXPR	Returns EXPR with the first character lowercase.
quotemeta EXPR	Returns EXPR with all regular expression metacharacters quoted.
rindex STR, SUBSTR [ , OFFSET ]	Returns the position of the last SUBSTR in STR at or before OFFSET.
substr EXPR, OFFSET [ , LEN ]	Extracts a substring of length LEN out of EXPR and returns it. If OFFSET is negative, counts from the end of the string. May be assigned to.
uc EXPR			Returns an uppercased version of EXPR.
ucfirst EXPR	Returns EXPR with the first character uppercased.
</String Functions>

<Array and List Functions>
delete $HASH{KEY}		Deletes the specified value from the specified hash. Returns the deleted value unless HASH is tied to a package that does not support this.
each %HASH				Returns a 2-element array consisting of the key and value for the next value of the hash. Entries are returned in an apparently random order. After all values of the hash have been returned, a null array is returned. The next call to each after that will start iterating again.
exists EXPR				Checks if the specified hash key exists in its hash array.
grep EXPR, LIST			Evaluates EXPR or BLOCK for each element of the LIST, locally setting $_ to refer to the element. Modifying $_ will modify the corresponding element from LIST. Returns the array of elements from LIST for which EXPR returned true.
join EXPR, LIST			Joins the separate strings of LIST into a single string with fields separated by the value of EXPR, and returns the string.
keys %HASH				Returns an array with all of the keys of the named hash.
map BLOCK LIST			Evaluates EXPR or BLOCK for each element of the LIST, locally setting $_ to refer to the element. Modifying $_ will modify the corresponding element from LIST. Returns the list of results.
pop @ARRAY				Pops off and returns the last value of the array.
push @ARRAY, LIST		Pushes the values of LIST onto the end of the array.
reverse LIST			In array context, returns the LIST in reverse order. In scalar context: returns the first element of LIST with bytes reversed.
scalar @ARRAY			Returns the number of elements in the array.
scalar %HASH			Returns a true value if the hash has elements defined.
shift [ @ARRAY ]		Shifts the first value of the array off and returns it, shortening the array by 1 and moving everything down. If @ARRAY is omitted, shifts @ARGV in main and @_ in subroutines.
sort [SUBROUTINE] LIST	Sorts the LIST and returns the sorted array value. SUBROUTINE, if specified, must return less than zero, zero, or greater than zero, depending on how the elements of the array (available to the routine as $a and $b) are to be ordered. SUBROUTINE may be the name of a user-defined routine, or a BLOCK.
splice @ARRAY, OFFSET [ , LENGTH [ , LIST ] ]	Removes the elements of @ARRAY designated by OFFSET and LENGTH, and replaces them with LIST (if specified). Returns the elements removed.
split [ PATTERN [ , EXPR [ , LIMIT ] ] ]		Splits a string into an array of strings, and returns it. If LIMIT is specified, splits into at most that number of fields. If PATTERN is also omitted, splits at the whitespace. If not in array context, returns number of fields and splits to @_. See also Search and Replace Functions.
unshift @ARRAY, LIST	Prepends list to the front of the array, and returns the number of elements in the new array.
values %HASH			Returns a normal array consisting of all the values of the named hash.
</Array and List Functions>

<Regular Expressions>
Each character matches itself, unless it is one of the special characters + ? . * ^ $ ( ) [ ] { } | \. The special meaning of these characters can be escaped using a \.
.				matches an arbitrary character, but not a newline unless it is a single-line match (see m//s).
(...)			groups a series of pattern elements to a single element.
^				matches the beginning of the target. In multiline mode (see m//m) also matches after every newline character.
$				matches the end of the line. In multiline mode also matches before every newline character.
[ ... ]			denotes a class of characters to match. [^ ... ] negates the class.
( ... | ... | ... )	matches one of the alternatives.
(?# TEXT )		Comment.
(?: REGEXP )	Like (REGEXP) but does not make back-references.
(?= REGEXP )	Zero width positive look-ahead assertion.
(?! REGEXP )	Zero width negative look-ahead assertion.
(? MODIFIER )	Embedded pattern-match modifier. MODIFIER can be one or more of i, m, s, or x.

Quantified subpatterns match as many times as possible. When followed with a ? they match the minimum number of times. These are the quantifiers:
+				matches the preceding pattern element one or more times.
?				matches zero or one times.
*				matches zero or more times.
{N,M}			denotes the minimum N and maximum M match count. {N} means exactly N times; {N,} means at least N times.

A \ escapes any special meaning of the following character if non-alphanumeric, but it turns most alphanumeric characters into something special:

\w				matches alphanumeric, including _, \W matches non-alphanumeric.
\s				matches whitespace, \S matches non-whitespace.
\d				matches numeric, \D matches non-numeric.
\A				matches the beginning of the string, \Z matches the end.
\b				matches word boundaries, \B matches non-boundaries.
\G				matches where the previous m//g search left off.
\n, \r, \f, \t	their usual meaning.
\w, \s and \d	may be used within character classes, \b denotes backspace in this context.

Back-references:
\1 ... \9		refer to matched subexpressions, grouped with (), inside the match.
</Regular Expressions>

<Search and Replace Functions>
<b>[ EXPR =~ ] [ m ] /PATTERN/ [ g ] [ i ] [ m ] [ o ] [ s ] [ x ]</b>
<div style="margin-left:30px;">
    Searches EXPR (default: $_) for a pattern. If you prepend an m you can use almost any pair of delimiters instead of the slashes. If used in array context, an array is returned consisting of the subexpressions matched by the parentheses in the pattern, i.e., ($1,$2,$3,...).
    Optional modifiers: g matches as many times as possible; i searches in a case-insensitive manner; o interpolates variables only once. m treats the string as multiple lines; s treats the string as a single line; x allows for regular expression extensions.
    If PATTERN is empty, the most recent pattern from a previous match or replacement is used.
    With g the match can be used as an iterator in scalar context.
</div>
<b>?PATTERN?</b>
<div style="margin-left:30px;">
    This is just like the /PATTERN/ search, except that it matches only once between calls to the reset operator.
</div>
<b>[ $VAR =~ ] s/PATTERN/REPLACEMENT/ [ e ] [ g ] [ i ] [ m ] [ o ] [ s ] [ x ]</b>
<div style="margin-left:30px;">
    Searches a string for a pattern, and if found, replaces that pattern with the replacement text. It returns the number of substitutions made, if any; if no substitutions are made, it returns false.
    Optional modifiers: g replaces all occurrences of the pattern; e evaluates the replacement string as a Perl expression; for any other modifiers, see /PATTERN/ matching. Almost any delimiter may replace the slashes; if single quotes are used, no interpretation is done on the strings between the delimiters, otherwise the strings are interpolated as if inside double quotes.
    If bracketing delimiters are used, PATTERN and REPLACEMENT may have their own delimiters, e.g., s(foo)[bar]. If PATTERN is empty, the most recent pattern from a previous match or replacement is used.
</div>
<b>[ $VAR =~ ] tr/SEARCHLIST/REPLACEMENTLIST/ [ c ] [ d ] [ s ]</b>
<div style="margin-left:30px;">
    Translates all occurrences of the characters found in the search list with the corresponding character in the replacement list. It returns the number of characters replaced. y may be used instead of tr.
    Optional modifiers: c complements the SEARCHLIST; d deletes all characters found in SEARCHLIST that do not have a corresponding character in REPLACEMENTLIST; s squeezes all sequences of characters that are translated into the same target character into one occurrence of this character.
</div>
<b>pos SCALAR</b>
<div style="margin-left:30px;">
    Returns the position where the last m//g search left off for SCALAR. May be assigned to.
</div>
<b>study [ $VAR ]</b>
<div style="margin-left:30px;">
    Study the scalar variable $VAR in anticipation of performing many pattern matches on its contents before the variable is next modified.
</div>
</Search and Replace Functions>

<File Test Operators>
These unary operators takes one argument, either a filename or a filehandle, and test the associated file to see if something is true about it. If the argument is omitted, they test $_ (except for -t, which tests STDIN). If the special argument _ (underscore) is passed, they use the information from the preceding test or stat call.
-r -w -x	File is readable/writable/executable by effective uid/gid.
-R -W -X	File is readable/writable/executable by real uid/gid.
-o -O		File is owned by effective/real uid.
-e -z		File exists/has zero size.
-s			File exists and has non-zero size. Returns the size.
-f -d		File is a plain file/a directory.
-l -S -p	File is a symbolic link/a socket/a named pipe (FIFO).
-b -c		File is a block/character special file.
-u -g -k	File has setuid/setgid/sticky bit set.
-t			Tests if filehandle (STDIN by default) is opened to a tty.
-T -B		File is a text/non-text (binary) file. -T and -B return true on a null file, or a file at EOF when testing a filehandle.
-M -A -C	File modification / access / inode-change time. Measured in days. Value returned reflects the file age at the time the script started. See also $^T in the section Special Variables.
</File Test Operators>

<File Operations>
Functions operating on a list of files return the number of files successfully operated upon.
chmod LIST				Changes the permissions of a list of files. The first element of the list must be the numerical mode.
chown LIST				Changes the owner and group of a list of files. The first two elements of the list must be the numerical uid and gid.
truncate FILE, SIZE		Truncates FILE to SIZE. FILE may be a filename or a filehandle.
link OLDFILE, NEWFILE	Creates a new filename linked to the old filename.
lstat FILE				Like stat, but does not traverse a final symbolic link.
mkdir DIR, MODE			Creates a directory with given permissions. Sets $! on failure.
readlink EXPR			Returns the value of a symbolic link.
rename OLDNAME, NEWNAME	Changes the name of a file.
rmdir FILENAME			Deletes the directory if it is empty. Sets $! on failure.
stat FILE				Returns a 13-element array (0: $dev, 1: $ino, 2: $mode, 3: $nlink, 4: $uid, 5: $gid, 6: $rdev, 7: $size, 8: $atime, 9: $mtime, 10: $ctime, 11: $blksize, 12: $blocks). FILE can be a filehandle, an expression evaluating to a filename, or _ to refer to the last file test operation or stat call. Returns a null list if the stat fails.
symlink OLDFILE, NEWFILE	Creates a new filename symbolically linked to the old filename.
unlink LIST				Deletes a list of files.
utime LIST				Changes the access and modification times. The first two elements of the list must be the numerical access and modification times.
</File Operations>

<Input / Output>
binmode FILEHANDLE				Arranges for the file opened on FILEHANDLE to be read or written in binary mode as opposed to text mode (null operation on UNIX).
close FILEHANDLE				Closes the file or pipe associated with the filehandle.
eof FILEHANDLE					Returns true if the next read will return end of file, or if the file is not open.
eof								Returns the EOF status for the last file read.
fcntl FILEHANDLE,FUNCTION,$VAR	Implements the fcntl(2) function. This function has non-standard return values.
fileno FILEHANDLE				Returns the file descriptor for a given (open) file.
flock FILEHANDLE, OPERATION		Calls flock(2) on the file. OPERATION formed by adding 1 (shared), 2 (exclusive), 4 (non-blocking), or 8 (unlock).
getc FILEHANDLE					Yields the next character from the file, or an empty string on end of file. If FILEHANDLE is omitted, reads from STDIN.
ioctl FILEHANDLE,FUNCTION,$VAR	Performs ioctl(2) on the file. This function has non-standard return values.
open FILEHANDLE,FILENAME		Opens a file and associates it with FILEHANDLE. If FILENAME is omitted, the scalar variable of the same name as the FILEHANDLE must contain the filename.
The following filename conventions apply when opening a file.
">FILE"							open FILE for output, creating it if necessary.
">>FILE"						open FILE in append mode.
"+<FILE"						open FILE with read/write access (file must exist).
"+>FILE"						open FILE with read/write access (file truncated).
"|CMD"							opens a pipe to command CMD; forks if CMD is -.
"CMD|"							opens a pipe from command CMD; forks if CMD is -.
FILE may be &FILEHND in which case the new filehandle is connected to the (previously opened) filehandle FILEHND. If it is &=N, FILE will be connected to the given file descriptor. open returns undef upon failure, true otherwise.
pipe READHANDLE, WRITEHANDLE	Returns a pair of connected pipes.
print [ FILEHANDLE ] [ LIST ]	Equivalent to print FILEHANDLE sprintf LIST.
printf[([FILEHANDLE] LIST)]		Equivalent to print FILEHANDLE sprintf(LIST).
read FILEHANDLE, $VAR, LENGTH [ , OFFSET ]	Reads LENGTH binary bytes from the file into the variable at OFFSET. Returns number of bytes actually read.
seek FILEHANDLE, POSITION, WHENCE	Arbitarily positions the file. Returns true if successful.
select [ FILEHANDLE ]			Returns the currently selected filehandle. Sets the current default filehandle for output operations if FILEHANDLE is supplied.
select RBITS, WBITS, NBITS, TIMEOUT	Performs a select(2) system call with the same parameters.
sprintf FORMAT, LIST			Returns a string formatted by (almost all of) the usual printf(3) conventions.
sysread FILEHANDLE, $VAR, LENGTH [ , OFFSET ]	Reads LENGTH bytes into $VAR at OFFSET.
syswrite FILEHANDLE, SCALAR, LENGTH [ , OFFSET ]	Writes LENGTH bytes from SCALAR at OFFSET.
tell [ FILEHANDLE ]				Returns the current file position for the file. If FILENAME is omitted, assumes the file last read.
write [ FILEHANDLE ]			Writes a formatted record to the specified file, using the format associated with that file.
</Input / Output>

<Directory Reading Routines>
closedir DIRHANDLE			Closes a directory opened by opendir.
opendir DIRHANDLE, DIRNAME	Opens a directory on the handle specified.
readdir DIRHANDLE			Returns the next entry (or an array of entries) from the directory.
rewinddir DIRHANDLE			Positions the directory to the beginning.
seekdir DIRHANDLE, POS		Sets position for readdir on the directory.
telldir DIRHANDLE			Returns the position in the directory.
</Directory Reading Routines>


<System Interaction>
chdir EXPR		Changes the working directory. Uses $ENV{"HOME"} or $ENV{"LOGNAME"} if EXPR is omitted.
getpgrp PID     Returns the process group for process PID (0, or omitted, means the current process).
getppid			Returns the process ID of the parent process.
sleep EXPR		Causes the program to sleep for EXPR seconds, or forever if no EXPR. Returns the number of seconds actually slept.
system LIST		Does exactly the same thing as exec LIST except that a fork is performed first, and the parent process waits for the child process to complete.
times			Returns a 4-element array (0: $user, 1: $system, 2: $cuser, 3: $csystem) giving the user and system times, in seconds, for this process and the children of this process.
umask EXPR		Sets the umask for the process and returns the old one. If EXPR is omitted, returns current umask value.
caller			Returns an array ($package,$file,$line,...) for a specific subroutine call. caller returns this info for the current subroutine, caller(1) for the caller of this subroutine, etc. Returns false if no caller.
return EXPR		Returns from a subroutine with the value specified.
time			Returns the number of seconds since January 1, 1970. Suitable for feeding to gmtime and localtime.
</System Interaction>


<Networking>
accept NEWSOCKET, GENERICSOCKET					Accepts a new socket.
bind SOCKET, NAME								Binds the NAME to the SOCKET.
connect SOCKET, NAME							Connects the NAME to the SOCKET.
getpeername SOCKET								Returns the socket address of the other end of the SOCKET.
getsockname SOCKET								Returns the name of the SOCKET.
getsockopt SOCKET, LEVEL, OPTNAME				Returns the socket options.
listen SOCKET, QUEUESIZE						Starts listening on the specified SOCKET.
recv SOCKET, SCALAR, LENGTH, FLAGS				Receives a message on SOCKET.
send SOCKET, MSG, FLAGS [ , TO ]				Sends a message on the SOCKET.
setsockopt SOCKET, LEVEL, OPTNAME, OPTVAL		Sets the requested socket option.
shutdown SOCKET, HOW							Shuts down a SOCKET.
socket SOCKET, DOMAIN, TYPE, PROTOCOL			Creates a SOCKET in DOMAIN with TYPE and PROTOCOL.
socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL	Works the same as socket, but creates a pair of bidirectional sockets.
</Networking>

<Miscellaneous>
defined EXPR	Tests whether the lvalue EXPR has an actual value.
do FILENAME		Executes FILENAME as a Perl script. See also require in the section Subroutines, Packages and Modules.
eval{EXPR}		Executes the code between { and }. Traps runtime errors are returned in $@.
local			Creates a scope for the listed variables local to the enclosing block, subroutine or eval.
my				Creates a scope for the listed variables lexically local to the enclosing block, subroutine or eval.
ref EXPR		Returns a true value if EXPR is a reference. Returns the package name if EXPR has been blessed into a package.
reset EXPR		Resets ?? searches so that they work again. EXPR is a list of single letters. All variables and arrays beginning with one of those letters are reset to their pristine state. Only affects the current package.
scalar EXPR		Forces evaluation of EXPR in scalar context.
undef LVALUE	Undefines the LVALUE. Always returns the undefined value.
wantarray		Returns true if the current context expects an array value.
</Miscellaneous>

<Special Variables>
The following variables are global and should be localized in subroutines:
$_	The default input and pattern-searching space.
$.	The current input line number of the last filehandle that was read.
$/	The input record separator, newline by default. May be multicharacter.
$,	The output field separator for the print operator.
$"	The separator that joins elements of arrays interpolated in strings.
$\	The output record separator for the print operator.
$#	The output format for printed numbers. Deprecated.
$*	Set to 1 to do multiline matching within strings. Deprecated, see the m and s modifiers in section Search and Replace Functions.
$?	The status returned by the last `...` command, pipe close or system operator.
$]	The perl version number, e.g., 5.001.
$[	The index of the first element in an array, and of the first character in a substring. Default is 0. Deprecated.
$;	The subscript separator for multidimensional array emulation. Default is "\034".
$!	If used in a numeric context, yields the current value of errno. If used in a string context, yields the corresponding error string.
$@	The Perl error message from the last eval or do EXPR command.
$:	The set of characters after which a string may be broken to fill continuation fields (starting with ^) in a format.
$0	The name of the file containing the Perl script being executed. May be assigned to.
$$	The process ID of the currently executing Perl program. Altered (in the child process) by fork.
$<	The real user ID of this process.
$>	The effective user ID of this process.
$(	The real group ID of this process.
$)	The effective group ID of this process.
$^A	The accumulator for formline and write operations.
$^D	The debug flags as passed to perl using -D.
$^F	The highest system file descriptor, ordinarily 2.
$^I	In-place edit extension as passed to Perl using -i.
$^L	Formfeed character used in formats.
$^P	Internal debugging flag.
$^T	The time (as delivered by time) when the program started. This value is used by the file test operators -M, -A and -C.
$^W	The value of the -w option as passed to Perl.
$^X	The name by which the currently executing program was invoked.

The following variables are context dependent and need not be localized:
$%	The current page number of the currently selected output channel.
$=	The page length of the current output channel. Default is 60 lines.
$-	The number of lines remaining on the page.
$~	The name of the current report format.
$^	The name of the current top-of-page format.
$|	If set to nonzero, forces a flush after every write or print on the currently selected output channel. Default is 0.
$ARGV	The name of the current file when reading from <>.

The following variables are always local to the current block:
$&	The string matched by the last successful pattern match.
$`	The string preceding what was matched by the last successful match.
$'	The string following what was matched by the last successful match.
$+	The last bracket matched by the last search pattern.
$1...$9...	Contain the subpatterns from the corresponding sets of parentheses in the last pattern successfully matched. $10... and up are only available if the match contained that many subpatterns.
</Special Variables>

<Special Arrays>
@ARGV		Contains the command-line arguments for the script (not including the command name).
@EXPORT		Names the methods a package exports by default.
@EXPORT_OK	Names the methods a package can export upon explicit request.
@INC		Contains the list of places to look for Perl scripts to be evaluated by the do FILENAME and require commands.
@ISA		List of base classes of a package.
@_			Parameter array for subroutines. Also used by split if not in array context.
%ENV		Contains the current environment.
%INC		List of files that have been included with require or do.
%OVERLOAD	Can be used to overload operators in a package.
%SIG		Used to set signal handlers for various signals.
</Special Arrays>
<Environment Variables>
Perl uses the following environment variables.
HOME		Used if chdir has no argument.
LOGDIR		Used if chdir has no argument and HOME is not set.
PATH		Used in executing subprocesses, and in finding the Perl script if -S is used.
PERL5LIB	A colon-separated list of directories to look in for Perl library files before looking in the standard library and the current directory.
PERLLIB		Used instead of PERL5LIB if the latter is not defined.
</Environment Variables>
<Using PostEdit>
	<div><b>PostEdit</b> is a windows-based application that allows you to use and editor to edit WaSQL pages.</div>
	To use PostEdit
	<ol>
		<li>Create a base Directory to place wasql domain pages in. (e.g. C:\websites)</li>
		<li>In your base directory, create a directory named after your domain name. (e.g. wasql.com)</li>
		<li>In the WaSQL directory, create a file called postEdit.ini and add your base directory to it.</li>
		<li>run postEdit.exe.  This will populate the domain directories with the WaSQL files.</li>
		<li>Use any editor to want to edit your WaSQL pages. When you save the changes, postEdit will check for errors and update your WaSQL database with the change.</li>
	</ol>
</Using PostEdit>